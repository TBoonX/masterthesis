Hadoop GIS: A High Performance Spatial Data Warehousing System over MapReduce

Indroduction ebschreibt Anforderungen an Umgebung: Big Data, high computation complexity
there are two major problems to handle for spatial partitioning: spatial data skew problem and boundary object problem.
spatial query algorith created
eigene query engine RESQUE: verwendet map/reduce von hadoop, hive anbindung, diverse staial query arten möglich (speziell für rasterdaten mit tiles)


---------------------------------------------------------------------
BA Dan

Hadoop+HBase Speicherung Messdaten
Eumonis
schemadesign in HBase
Phoernix framework zur datenabfrage


---------------------------------------------------------------------

BA Thurm: Einsatz von NoSQL-Datenbanksystemen für Geodaten

grober Inhalt: NoSQL definition, analyse vorhandener noSQL Systeme und spatial extensions, vorstellung vorhandener implementierungen, allgemeine aussage über eignung von nosql für spatial data

Kapitel 1:
NoSQL orignal im Zusammenhang mit Carlo Strozzi
Big Table Google plus GFS -> Standardserver, verteilt, wachsende Datenmengen
amazon Dynamo
Konferenz in San Francisco -> NoSQL
NoSQL Definition von Stefan Edlich
Skalierung def.
CAP: beschreibende Definition
ACID/BASE
MapReduce: mit Edlich als Quelle

Kapitel 2:
Kategorisierung:
  Key/value:	Beispiel Redis mit Persistenzmodi, verteilt und Datentypen wie List
	        spatial nicht verfügbar (nur binärablage)
  Wide Column Stores:	Big Table, Hadoop und cassandra
			Datenhaltung: Map zeigt auf columns
			Cassandra super column und consitent hashing
			spatial extension nicht vorhanden, Datenhaltung macht es aber möglich (google als vorbild)
  Document stores:	JSON/BSON
			CouchDB 
		      


---------------------------------------------------------------------

Taschenbuch Datenbanken

S. 21 
"Ein Datenmodell enthällt drei Bestandteile:
- Datenstrukturen: Objekte und deren Beziehungen (statische Eigenschaften)
- Operationen und Beziehungen zwischen Operationen (dynamische Eigenschaften)
- Integraionsbedingungen auf Objekten und Beziehungen. Dies sind Regeln, die die Menge der erlaubten Zustände bzw. Zustandsübergänge definieren. Sie können modellinhärent sein oder explizit definiert werden."

S. 22
"Ein Datenbankmodell ist ein Datenmodell für ein Datenbanksystem. Es bestimmt. auf welche Art und Weise Daten prinzipiell gespeichert werden und wie man die Daten manipulieren kann."

S. 32
"Ein Informationssystem (IS) dient der rechnergestützten Erfassung, Speicherung, Verarbeitung, Pflege, Analyse, Verbreitung, Übertragung und Anzeige von Informationen. Es ist ein soziotechnisches System, das menschlische und maschinelle Komponenten (Teilsysteme) für die optimale Bereitstellung von Informationen und Kommunikation umfasst."

S. 73
relationales Datenmodell: relation - zeilen=Tupel und Spalten=Attribute

S. 74
"Ein Attribut repräsentiert eine Eigenschaft eines Objekttyps und wird über eine Tabellenspaöte abgebildet."
"Eine Relation ist eine Teilmenge des kartesischen Produktes über den Wertebereich ihrer Attribute. Inhaltlich repräsentiert die Relation eine Menge von Objekten eines Objekttyps."

S. 240
"Das Speichersystem bildet die Speicherstrukturen der internen Satzschnittstelle auf Speicherseiten eines linearen virtuellen Adressraums ab. Aufgabe des Speichersystems ist es somit, die internen Datensätze und Einträge der Zugriffspfade auf Seiten fester Größe einzupassen. Hinzu kommen Operationen zur Verwaltung von Sperren sowie zur Wiederherstellung im Fehlerfall."

S. 243
"Lokalität bezeichnet die Eigenschaft, dass Zugriffe typischerweise auf einen kleineren Bereich der Datenbank bzw. des Externspeichers begrenzt sind."

S. 262
ACID:
Atomarität: Transaktionen sind atomar, wodurch ein Abbruch einer Transaktion deren Operationen rückgängig macht.
Konsistenz: Ende/Abbruch einer Transaktion mit Nachbedingung aller Intergritätsbedingungen
Isolation: Transaktionen verschiedener Benutzer beeinflussen sich nicht gegenseitig
Dauerhaftigkeit: Jede Änderung einer Transaktion ist nach Ende dieser auf die Festplatte geschrieben und nicht mehr im Puffer

S. 284
"Ein Index ist ein Verzeichnis von Dateneinträgen der Form (k, k*), das den effizienten Zugriff auf allen Einträgen mit einem Suchschlüsselwert k erlaubt. Dabei bezeichnet k den Wert eines Suchschlüssels (auch Zugriffsattribut) und k* den Verweis auf den Datensatz in der Datei, der k als Wert des Suchschlüssels enthält."

S. 285
"ein geclusteter Index ist (annähernd) in der gleichen Reihenfolge sortiert wie die Datei, auf die der Index verweist."

S. 285 f
"ein dicht besetzter Index(dense index) enthält enthällt für jeden Suchschlüsselwert, der in einem Datensatz der Datei vorkommt, (mindestens) einen Dateneintrag..."

S. 286
"Ein dünn besetzter Index (sparse Index) speichert nicht für jeden Suchschlüsselwert einen Eintrag im Index."

S. 287
ISAM: index-sequential access method, Grundlage ist eine sortierte Datei, neue Datei mit Index zu jeder Seite der Originaldatei einen Eintrag (mit dem ersten Schlüsselwert auf dieser Seite), auch Baumstruktur möglich (Blätter enthalten Dateneinträge und verweisen jeweils auf die Datenseite die als erste einen Satz mit dem Suchschlüsselwert k in der Hauptdatei enthält), statisch, effektiv wenn die Datei nicht häufig geändert wird, Überlaufseiten ergänzen Blattseiten um neue Dateneinträge, lange Ketten von Überlaufseiten mindern performanz von suchoperationen, häufige inserts oder deletes sind ungeeignet und erfordern oft eine Reorganisation

S. 288
B-Baum: "Der B-Baum ist ein dynamisch balancierter Indexbaum, bei dem jeder Indexeintrag auf eine Seite der Hauptdatei zeigt.", Höhe h und Ordnung m, Eigenschaften: "1. Jeder Weg von der Wurzel zum Blatt hat die Länge h (balanciert) 2. Jeder Knoten enthält mindestens m Elemente (außer der Wurzel) und  höchstens 2m Elemente (mindestens halbvolle Belegung) 3. Jeder Knoten ist entweder eine Blattseite oder hat höchstens 2m + 1 Kinder (maximale Belegung)", garantierte minimale Belegung von 50%, h beschreibt die Anzahl der Seitenzugriffe  als relevantes Maß für die Zugriffskosten, n Datensätze: Zugriff in maximal logm(n) Seitenzugriffen
B+-Baum: Dateneinträge aussschließlich in Blattknoten, Blattknoten unidirektional verkettet, Ordnung ist hier (m -> Mindestbelegung für Indexseiten, m* -> Mindestbelegung der Blattseiten)

S. 289
Bulk Loading:  großer Datensatz wird sortiert und anschließend ein B-Baum aufgebaut

S. 290
digitale Bäume: Verfahren, mit Schlüsselwerten von Zeichenketten aus einem festen Alphabet, lexikografische Ordnung, nicht ausgeglichen, Vorteil ist das keine kompletten Schlüssel gespeichert werden müssen

S. 291
Hashing: Hashfunktion ordnet Speicherbereich (Bucket) einen Wert zu sodass ein direkter Zugriff möglich ist, erweitertes hashing  stellt eine dynamische Hashfunktion zur Verfügung (index wird dynamisch angepasst)

S. 296
"Die gemeinsame Speicherung von Datensätzen, die in typischen Anfragen zusammen benötigt werden, wird als Clustering bezeichnet."
clusering: setzt Indeystruktur vorraus, kann nach Schlüsselattributen oder Fremdschlüsselattributen erfolgen
"Bei der Partitionierung wird eine Relation in disjunkte Partitionen aufgeteilt, die auf verschiedenen Platten gespeichert werden."

S. 297
Partitionierung: Vorteile: Anfrageoptimierung durch auslasten der Partitionen; Vereinfachung der Administration der Partitionen; Paralelle Verarbeitung,
				 Bereichspartitionierung, Round-Robin-Partitionierung, Hash-Partitionierung
				 
S. 333
"Die Begriffe Benchmark (Maßstab) bzw. Benchmarking (Maßstäbe setzen) bezeichnen ein formalisiertes Konzept, um Verbesserungsmöglichkeiten durch Gegenüberstellung von Leistungsmerkmalen mehrerer vergleichbarer Objekte, Prozesse oder Programme zu finden."
Benchmarkingergebnisse= Durchsatzwert und Preis-/Leistungsverhältniss

TPC hat Benchmarks definiert: TPC-D wäre gut

S. 394 ff.
"Bei einem Mehrrechner-Datenbanksystem (MDBS) werden die Datenbankverwaltungsfunktionen auf mehreren Prozessoren bzw. Rechnern ausgeführt."
MDBS shared everything: ein DBMS auf eng gekoppelten Multiprozessor-Rechnerumgebung
     shared Nothing: Verarbeitung durch mehrere Rechner mit jeweils einem DBMS (Externspeicher ist unter den beteiligten Rechnern partitioniert)
	 shared disk: mehrere lokal angeordnete, lose oder nah gekoppelte Rechner mit je einem DBMS und einer gemeinsamen Speicherzuordnung
	 Lokal verteilte Systeme werden als parallele Datenbanksysteme bezeichnet

S. 398
"Verteilte Datenbanksysteme (VDBS) sind geografisch verteilte Shared-Nothing Systeme mit homogenen lokalen DBMS, die gemeinsam ein globales konzeptionelles DB-Schema unterstützen.
Förderierte Datenbanksysteme (FDBS) sind ebenfalls geografisch verteilte Sgated nothing systeme, wobei die beteiligten lokalen DBMS eine höhere Autonomie aufweisen, d.h. dass jeweils eine eigene lokale Datenbank mit lokalem DB-schema vorliegt."